// Code generated by MockGen. DO NOT EDIT.
// Source: model/DBServiceInit.go

// Package mock_model is a generated GoMock package.
package controller

import (
	model "catalogService/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIServiceDb is a mock of IServiceDb interface.
type MockIServiceDb struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceDbMockRecorder
}

// MockIServiceDbMockRecorder is the mock recorder for MockIServiceDb.
type MockIServiceDbMockRecorder struct {
	mock *MockIServiceDb
}

// NewMockIServiceDb creates a new mock instance.
func NewMockIServiceDb(ctrl *gomock.Controller) *MockIServiceDb {
	mock := &MockIServiceDb{ctrl: ctrl}
	mock.recorder = &MockIServiceDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceDb) EXPECT() *MockIServiceDbMockRecorder {
	return m.recorder
}

// AddMenuItems mocks base method.
func (m *MockIServiceDb) AddMenuItems(arg0 int, arg1 model.MenuItems) (model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMenuItems", arg0, arg1)
	ret0, _ := ret[0].(model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMenuItems indicates an expected call of AddMenuItems.
func (mr *MockIServiceDbMockRecorder) AddMenuItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMenuItems", reflect.TypeOf((*MockIServiceDb)(nil).AddMenuItems), arg0, arg1)
}

// CreateRestaurant mocks base method.
func (m *MockIServiceDb) CreateRestaurant(arg0 model.Restaurants) (model.RestaurantResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRestaurant", arg0)
	ret0, _ := ret[0].(model.RestaurantResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRestaurant indicates an expected call of CreateRestaurant.
func (mr *MockIServiceDbMockRecorder) CreateRestaurant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRestaurant", reflect.TypeOf((*MockIServiceDb)(nil).CreateRestaurant), arg0)
}

// GetAllMenuItems mocks base method.
func (m *MockIServiceDb) GetAllMenuItems(arg0 int) ([]model.MenuItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMenuItems", arg0)
	ret0, _ := ret[0].([]model.MenuItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMenuItems indicates an expected call of GetAllMenuItems.
func (mr *MockIServiceDbMockRecorder) GetAllMenuItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMenuItems", reflect.TypeOf((*MockIServiceDb)(nil).GetAllMenuItems), arg0)
}

// GetAllRestaurants mocks base method.
func (m *MockIServiceDb) GetAllRestaurants() ([]model.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRestaurants")
	ret0, _ := ret[0].([]model.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRestaurants indicates an expected call of GetAllRestaurants.
func (mr *MockIServiceDbMockRecorder) GetAllRestaurants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRestaurants", reflect.TypeOf((*MockIServiceDb)(nil).GetAllRestaurants))
}

// GetRestaurant mocks base method.
func (m *MockIServiceDb) GetRestaurant(arg0 int) (model.Restaurant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestaurant", arg0)
	ret0, _ := ret[0].(model.Restaurant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestaurant indicates an expected call of GetRestaurant.
func (mr *MockIServiceDbMockRecorder) GetRestaurant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestaurant", reflect.TypeOf((*MockIServiceDb)(nil).GetRestaurant), arg0)
}
